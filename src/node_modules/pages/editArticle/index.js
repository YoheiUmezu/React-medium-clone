import React, {useState, useEffect, useContext} from 'react'
import {Redirect} from 'react-router-dom'
import ArticleForm from 'components/articleForm'
import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'contexts/currentUser'

const EditArticle = ({match}) => {//match = props
    const slug = match.params.slug
    const apiUrl = `/articles/${slug}`
    const [isSuccessfulSubmit, setIsSuccessfulSubmit] = useState(false)
    const [
        {response: updateArticleResponse, error: updateArticleError}, doUpdateArticle
    ] = useFetch(apiUrl)

    const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(apiUrl)

    const [currentUserState] = useContext(CurrentUserContext)

    const [initialValues, setInitialValues] = useState(null)

    const onSubmit = article => { 
        
        doUpdateArticle({
            method: 'put',
            data: {
                article
            }
        })
    }


    useEffect(() => {
        doFetchArticle()
    }, [doFetchArticle])

    useEffect(() => {
        if(!fetchArticleResponse){
            return
        } 

        setInitialValues({

            title: fetchArticleResponse.article.title,
            description: fetchArticleResponse.article.description,
            body: fetchArticleResponse.article.body,
            tagList: fetchArticleResponse.article.tagList.join(' ')
            //https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/join
        })
         // const initialValues = {
        //     title: '',
        //     description: '',
        //     body: '',
        //     tagList: ''
        // }
    }, [fetchArticleResponse])

    useEffect(() => {
        if(!updateArticleResponse){
            return
        }
        setIsSuccessfulSubmit(true)
    }, [updateArticleResponse])

    if(currentUserState.isLoggedIn === null) {
        return null
    } 

    // if(!currentUserState.isLoggedIn === false){
    //     return <Redirect to="/" />
    // }

    if(currentUserState.isLoggedIn === false) {//ログインしていない場合にはホームに戻る
        return <Redirect to="/" />
    }

    if(isSuccessfulSubmit){//submitできた場合編集ページに戻る
        return <Redirect to={`/articles/${slug}`} />
    }

    return (
        <div>
            <ArticleForm 
            onSubmit={onSubmit}
            initialValues={initialValues}
            errors={(updateArticleError && updateArticleError.errors) || []}//error.eroors = backendでerrorを起こすerror
            />
        </div>
    )
    
}

export default EditArticle