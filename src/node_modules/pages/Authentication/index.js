import React, {useState, useEffect, useContext } from 'react'
import {Link, Redirect} from 'react-router-dom'
import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'

import {CurrentUserContext} from 'contexts/currentUser'

import BackendErrorMessages from 'pages/Authentication/components/backendErrorMessages'

const Authentication = props => {
    const isLogin = props.match.path === '/login'
    const pageTitle = isLogin ? 'Sign In' : 'Sign Up'
    const descriptionLink = isLogin ? '/register' : '/login'
    const descriptionText = isLogin ? 'Need an account?' : 'Have an account'
    const apiUrl = isLogin ? '/users/login' : '/users/'

    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [username, setUsername] = useState('')
    const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)

    const [{isLoading, response, error}, doFetch] = useFetch(
        apiUrl
    )

    const [, setToken] = useLocalStorage('token')

    const [, dispatch] = useContext(CurrentUserContext)
    //dispatchとは　機能の呼び出しなどを表すことが多い。


    const handleSubmit = event => {
        event.preventDefault()

        const user = isLogin ? {email, password} : {email, password, username}

        doFetch({
            method: 'post',
           data: {
                user
           }
        })
        // console.log('value', email, password)
    }

    useEffect(() => {
        if (!response) {
            return
        }
        // console.log(response)
        setToken(response.user.token)
        //localStorage.setItem('token', response.user.token)
        setIsSuccessfullSubmit(true)
        dispatch({type: 'SET_AUTHORIZED', payload: response.user})
        // ペイロードとは、IT用語としては、パケット通信においてパケットに含まれるヘッダやトレーラなどの付加的情報を除いた、データ本体のことである。
        // setCurrentUserState(state => ({ useReducer使った
        //     ...state,
        //     isLoggedIn: true,
        //     isLoading: false,
        //     currentUser: response.user
        // }))
    }, [response, setToken, dispatch])

    if(isSuccessfullSubmit) {
        return <Redirect to='/' />
    }

    
    return (
        <div className="auth-page">
            
            <div className="container page">
                <div className="row">
                    <div className="col-md-6 offset-md-3 col-xs-12">
                        <h1 className="text-xs-center">{pageTitle}</h1>
                        <p className="text-xs-center">
                            <Link to={descriptionLink}>{descriptionText}</Link>
                        </p>
                        {error && <BackendErrorMessages BackendErrors={error.errors}/>}
                        <form onSubmit={handleSubmit}>
                            
                            <fieldset>
                                {!isLogin && (
                                <fieldset className="form-group">
                                    <input 
                                    type="text"
                                    className="form-control form-cnotrol-lg"
                                    placeholder="Username"
                                    value={username}
                                    onChange={e => setUsername(e.target.value)}
                                    />
                                </fieldset>
                                )  }

                                <fieldset className="form-group">
                                    <input 
                                    type="email"
                                    className="form-control form-cnotrol-lg"
                                    placeholder="Email"
                                    value={email}
                                    onChange={e => setEmail(e.target.value)}
                                    />
                                </fieldset>

                                <fieldset className="form-group">
                                    <input 
                                    type="password"
                                    className="form-control form-cnotrol-lg"
                                    placeholder="Password"
                                    value={password}
                                    onChange={e => setPassword(e.target.value)}//入力したpasswordの情報が描写される
                                    />
                                </fieldset>
                                <button 
                                disabled={isLoading}
                                className="btn btn-lg btn-primary pull-xs-right"
                                type="submit"
                                >
                                    {pageTitle}
                                </button>
                            </fieldset>
                        </form>
                    </div> 
                </div>
            </div>
        </div>
    )
}

export default Authentication
